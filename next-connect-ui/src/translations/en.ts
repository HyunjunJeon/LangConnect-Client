export const en = {
  common: {
    loading: 'Loading...',
    error: 'Error',
    success: 'Success',
    cancel: 'Cancel',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    create: 'Create',
    search: 'Search',
    refresh: 'Refresh',
    logout: 'Log out',
    none: 'None',
    selectAll: 'Select all',
    selected: '{{count}} selected',
    total: 'Total {{count}}',
    yes: 'Yes',
    no: 'No',
    creating: 'Creating...',
    deleting: 'Deleting...',
  },
  sidebar: {
    main: 'Main',
    collections: 'Collections',
    documents: 'Documents',
    search: 'Search',
    apiTester: 'API Tester',
    mainTitle: 'Main',
    mcp: 'MCP Servers'
  },
  collections: {
    title: 'Collection Management',
    description: 'Create and manage document collections',
    newCollection: 'New Collection',
    collectionList: 'Collection List',
    noCollections: 'No collections',
    noCollectionsDescription: 'Create your first collection to organize documents systematically.',
    createFirstCollection: 'Create First Collection',
    stats: {
      collections: 'Collections',
      documents: 'Documents',
      chunks: 'Chunks',
      documentsCount: '{{count}} documents',
      chunksCount: '{{count}} chunks'
    },
    table: {
      collection: 'Collection',
      stats: 'Statistics',
      uuid: 'UUID',
      metadata: 'Metadata'
    },
    deleteConfirm: {
      title: 'Delete Confirmation',
      description: 'Are you sure you want to delete the selected collections? This action cannot be undone.',
      collectionsToDelete: 'Collections to delete ({{count}}):',
      warningMessage: 'All documents in the deleted collections will also be deleted.',
      deleteButton: 'Delete',
      deleting: 'Deleting...',
      deleteSelected: 'Delete Selected'
    },
    popover: {
      basicInfo: 'Basic Information',
      statistics: 'Statistics'
    },
    messages: {
      fetchError: 'Failed to fetch collections',
      deleteSuccess: '{{count}} collections successfully deleted.',
      deleteFailed: '{{count}} collections failed to delete.'
    },
    modal: {
      createTitle: 'Create New Collection',
      nameLabel: 'Collection Name',
      namePlaceholder: 'Enter collection name',
      descriptionLabel: 'Description',
      descriptionPlaceholder: 'Enter collection description (optional)',
      creating: 'Creating...',
      createSuccess: 'Collection created successfully',
      createError: 'Failed to create collection'
    }
  },
  documents: {
    title: 'Document Management',
    description: 'Upload and manage documents in collections',
    selectCollection: 'Please select a collection first',
    uploadDocument: 'Upload Document',
    noDocuments: 'No documents',
    noDocumentsDescription: 'Upload your first document to this collection.',
    uploadFirstDocument: 'Upload First Document',
    table: {
      fileName: 'File Name',
      uploadDate: 'Upload Date',
      chunks: 'Chunks',
      actions: 'Actions'
    },
    deleteConfirm: {
      title: 'Delete Document',
      description: 'Are you sure you want to delete "{{fileName}}"? This action cannot be undone.',
      warningMessage: 'All chunks associated with this document will also be deleted.'
    },
    messages: {
      uploadSuccess: 'Document uploaded successfully',
      uploadError: 'Failed to upload document',
      uploadRequireFiles: 'Please select files to upload',
      deleteSuccess: 'Document deleted successfully',
      deleteError: 'Failed to delete document',
      fetchError: 'Failed to fetch documents'
    },
    modal: {
      uploadTitle: 'Upload Document',
      selectFile: 'Select File',
      supportedFormats: 'Supported formats: PDF, TXT, MD, DOCX, HTML',
      uploading: 'Uploading...',
      processing: 'Processing document...'
    }
  },
  search: {
    title: 'Document Search',
    description: 'Search documents using semantic or keyword search',
    selectCollection: 'Select Collection',
    searchPlaceholder: 'Enter search query...',
    searchButton: 'Search',
    searching: 'Searching...',
    searchType: 'Search Type',
    semanticSearch: 'Semantic Search',
    keywordSearch: 'Keyword Search',
    hybridSearch: 'Hybrid Search',
    alphaValue: 'Alpha value (0-1)',
    noResults: 'No results found',
    results: 'Search Results',
    relevanceScore: 'Relevance: {{score}}',
    enterSearchQuery: 'Please enter search query',
    selectCollectionFirst: 'Please select a collection',
    invalidJson: 'Invalid JSON format',
    foundResults: 'Found {{count}} results'
  },
  apiTester: {
    title: 'API Tester',
    description: 'Test API endpoints with authentication',
    endpoint: 'Endpoint',
    method: 'Method',
    headers: 'Headers',
    body: 'Body',
    sendRequest: 'Send Request',
    response: 'Response',
    responseTime: 'Response time: {{time}}ms',
    status: 'Status'
    ,
    collectionIdRequired: 'Collection ID is required',
    documentIdRequired: 'Document ID is required',
    searchQueryRequired: 'Search query is required',
    useDocumentUpload: 'Please use document upload in Documents page',
    goToDocuments: 'Go to Documents ‚Üí',
    collectionIdPlaceholder: 'Enter collection ID',
    documentIdPlaceholder: 'Enter document ID',
    responsePlaceholder: 'API response will appear here',
    sendRequestPlaceholder: 'Send a request to see the response'
  },
  auth: {
    signIn: 'Sign In',
    signUp: 'Sign Up',
    email: 'Email',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    forgotPassword: 'Forgot Password?',
    alreadyHaveAccount: 'Already have an account?',
    dontHaveAccount: "Don't have an account?",
    signInError: 'Failed to sign in',
    signInProcessError: 'An error occurred during sign in',
    signInProcessing: 'Processing...',
    signInSuccess: 'Sign in successful',
    signInInvalidCredentials: 'Invalid email or password',
    signUpError: 'Failed to sign up',
    signUpSuccess: 'Sign up successful',
    signUpEmailExists: 'This email is already registered',
    unknownError: 'An unknown error occurred',
    logoutSuccess: 'Logged out successfully',
    emailVerification: {
      title: 'Email Verification Required',
      subtitle: 'Almost done!',
      message: 'Please click the confirmation link sent to your email to complete verification.',
      description: 'Once verified, you can log in.',
      emailNotReceived: "Didn't receive the email? Please check your spam folder.",
      goToLogin: 'Go to Login'
    },
    signUpProcessing: 'Processing...',
    signUpButton: 'Sign Up',
    signInDescription: 'Enter your information to sign in',
    signUpDescription: 'Enter your information to create an account'
  },
  theme: {
    light: 'Light',
    dark: 'Dark',
    system: 'System'
  },
  language: {
    english: 'English',
    korean: 'ÌïúÍµ≠Ïñ¥'
  },
  main: {
    title: 'üîó LangConnect Client',
    subtitle: 'Welcome to <strong>LangConnect</strong>.',
    description: 'A powerful document management and search system powered by LangChain and PostgreSQL.',
    keyFeatures: 'üöÄ Key Features',
    keyFeaturesDescription: 'This application provides a comprehensive interface for document management with advanced search capabilities:',
    collectionManagement: {
      title: 'Collection Management',
      features: [
        'Create and manage document collections',
        'View collection statistics',
        'Batch delete collections'
      ],
      goTo: 'Go to Collections'
    },
    documentManagement: {
      title: 'Document Management',
      features: [
        'Upload multiple documents (PDF, TXT, MD, DOCX)',
        'View and manage document chunks',
        'Delete individual chunks or entire documents'
      ],
      goTo: 'Go to Documents'
    },
    search: {
      title: 'Search',
      features: [
        '<strong>Semantic Search</strong>: AI-powered similarity search',
        '<strong>Keyword Search</strong>: Traditional full-text search',
        '<strong>Hybrid Search</strong>: Combines benefits of both approaches',
        'Advanced metadata filtering'
      ],
      goTo: 'Go to Search'
    },
    apiTester: {
      title: 'API Tester',
      features: [
        'Test all API endpoints directly',
        'Explore API functionality',
        'Integration development and debugging'
      ],
      goTo: 'Go to API Tester'
    },
    about: {
      title: 'üìå About This Project',
      description: '<strong>LangConnect</strong> is an open-source project that combines the following technologies:',
      techStack: [
        '<strong>LangChain</strong> - Document processing and embeddings',
        '<strong>PostgreSQL</strong> - Vector storage with pgvector extension',
        '<strong>FastAPI</strong> - High-performance API backend',
        '<strong>Streamlit</strong> - Interactive user interface',
        '<strong>Next.js</strong> - Interactive user interface'
      ],
      ragReady: 'Perfect for building RAG (Retrieval-Augmented Generation) applications!',
      links: {
        title: 'üîó Links',
        github: 'GitHub Repository',
        teddynote: 'TeddyNote LAB',
        docs: 'Documentation',
        nextjsClient: 'Next.js Client UI'
      }
    },
    footer: 'Made with ‚ù§Ô∏è by'
  },
  mcp: {
    dashboard: {
      title: 'MCP Server Management',
      description: 'Create and manage Docker-based MCP servers',
      refresh: 'Refresh',
      createServer: 'New Server',
      totalServers: 'Total Servers',
      runningServers: 'Running',
      stoppedServers: 'Stopped',
      errorServers: 'Error',
      serverList: 'Server List',
      noServers: 'No servers'
    },
    server: {
      name: 'Name',
      transport: 'Transport',
      status: 'Status',
      port: 'Port',
      controls: 'Controls',
      start: 'Start',
      stop: 'Stop',
      restart: 'Restart',
      delete: 'Delete',
      viewDetails: 'View Details',
      viewLogs: 'View Logs',
      copyConfig: 'Copy MCP Config',
      configCopied: 'Config Copied',
      configCopiedDescription: 'MCP configuration has been copied to clipboard',
      configCopyError: 'Failed to Copy',
      configCopyErrorDescription: 'Unable to copy configuration to clipboard',
      elicitation: 'Interactive Tools',
      deleteConfirmTitle: 'Confirm Server Deletion',
      deleteConfirmDescription: 'Are you sure you want to delete the "{{name}}" server? This action cannot be undone.',
      startSuccess: 'Server Started',
      startSuccessDescription: '{{name}} server has been started successfully.',
      startError: 'Failed to Start Server',
      startErrorDescription: 'An error occurred while starting the server.',
      stopSuccess: 'Server Stopped',
      stopSuccessDescription: '{{name}} server has been stopped successfully.',
      stopError: 'Failed to Stop Server',
      stopErrorDescription: 'An error occurred while stopping the server.',
      restartSuccess: 'Server Restarted',
      restartSuccessDescription: '{{name}} server has been restarted successfully.',
      restartError: 'Failed to Restart Server',
      restartErrorDescription: 'An error occurred while restarting the server.',
      deleteSuccess: 'Server Deleted',
      deleteSuccessDescription: '{{name}} server has been deleted successfully.',
      deleteError: 'Failed to Delete Server',
      deleteErrorDescription: 'An error occurred while deleting the server.',
      createTitle: 'New MCP Server',
      createDescription: 'Enter the information below to create a new MCP server.',
      createSuccess: 'Server Created',
      createSuccessDescription: '{{name}} server has been created successfully.',
      createAndStartSuccess: 'Server Created and Started',
      createAndStartSuccessDescription: '{{name}} server has been created and started successfully.',
      autoStartError: 'Auto-start Failed',
      autoStartErrorDescription: 'Server was created but could not be started automatically. Please start it manually.',
      createError: 'Failed to Create Server',
      createErrorDescription: 'An error occurred while creating the server.',
      description: 'Description',
      descriptionPlaceholder: 'Enter a description for the server (optional)',
      basicTab: 'Basic',
      runtimeTab: 'Runtime',
      environmentTab: 'Environment',
      advancedTab: 'Advanced',
      nameDescription: 'Unique name to identify the server',
      transportDescription: 'MCP communication protocol',
      portDescription: 'Port number for SSE transport (default: auto-assign)',
      dockerImage: 'Docker Image',
      dockerImageDescription: 'Docker image to use (default: langconnect-mcp:latest)',
      notAvailable: 'Not Available',
      command: 'Command',
      commandDescription: 'Command to run in the container',
      arguments: 'Arguments',
      argumentPlaceholder: 'Enter command arguments',
      environmentVariables: 'Environment Variables',
      cpuLimit: 'CPU Limit',
      cpuLimitDescription: 'CPU usage limit (e.g., 0.5 = 50%)',
      memoryLimit: 'Memory Limit',
      memoryLimitDescription: 'Memory usage limit (e.g., 512m, 1g)',
      authRequired: 'Authentication Required',
      authRequiredDescription: 'Require auth token for API access',
      elicitationDescription: 'Enable AI-powered interactive tools',
      middleware: 'Middleware',
      middlewarePlaceholder: 'Enter middleware name',
      middlewareDescription: 'FastMCP middleware (e.g., logging, rate-limiting)',
      overview: 'Overview',
      configuration: 'Configuration',
      metrics: 'Metrics',
      basicInfo: 'Basic Information',
      id: 'ID',
      timestamps: 'Timestamps',
      createdAt: 'Created At',
      updatedAt: 'Updated At',
      startedAt: 'Started At',
      createdBy: 'Created By',
      containerInfo: 'Container Information',
      containerName: 'Container Name',
      containerId: 'Container ID',
      apiUrl: 'API URL',
      resourceLimits: 'Resource Limits',
      currentStatus: 'Current Status',
      state: 'State',
      message: 'Message',
      health: 'Health',
      healthStatus: 'Health Status',
      lastCheck: 'Last Check',
      cpuUsage: 'CPU Usage',
      memoryUsage: 'Memory Usage',
      networkIO: 'Network I/O',
      bytesReceived: 'Bytes Received',
      bytesSent: 'Bytes Sent',
      noMetricsAvailable: 'No metrics available',
      noDescription: 'No description'
    },
    logs: {
      title: '{{name}} Server Logs',
      streamingDescription: 'Streaming logs in real-time.',
      pausedDescription: 'Log streaming is paused.',
      live: 'Live',
      paused: 'Paused',
      count: '{{count}} logs',
      pause: 'Pause',
      resume: 'Resume',
      copy: 'Copy',
      copied: 'Copied',
      download: 'Download',
      clear: 'Clear',
      noLogs: 'No logs',
      streamError: 'Log streaming error',
      copyError: 'Failed to copy logs',
      copyErrorDescription: 'Unable to copy to clipboard'
    },
    elicitation: {
      title: '{{name}} Interactive Tools',
      description: 'Start a conversation with the AI-powered MCP server',
      messages: '{{count}} messages',
      clearConversation: 'Clear conversation',
      noMessages: 'No messages',
      startConversation: 'Enter a message to start the conversation',
      thinking: 'Thinking...',
      inputPlaceholder: 'Enter your message...',
      hint: 'Press Enter to send, Shift+Enter for new line',
      sendError: 'Failed to send message',
      sendErrorDescription: 'An error occurred while sending the message',
      copyError: 'Failed to copy message',
      copyErrorDescription: 'Unable to copy to clipboard',
      toolCalls: 'Tool Calls'
    }
  }
}